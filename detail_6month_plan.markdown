# –î–µ—Ç–∞–ª—å–Ω—ã–π 6-–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω Data Analyst (–Ω–æ–≤–∏—á–æ–∫) - macOS –≤–µ—Ä—Å–∏—è

## Snowflake + Tableau + Python + Google Data Analytics

### üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è macOS —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ Tableau

### –û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞

* **–§–æ—Ä–º–∞—Ç**: 24 –Ω–µ–¥–µ–ª–∏, 5 –¥–Ω–µ–π/–Ω–µ–¥–µ–ª—é –ø–æ 3 —á–∞—Å–∞ (15 —á–∞—Å–æ–≤/–Ω–µ–¥–µ–ª—è)

* **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞**: 30-45 –º–∏–Ω —Ç–µ–æ—Ä–∏—è + 90-120 –º–∏–Ω –ø—Ä–∞–∫—Ç–∏–∫–∞ + 15-30 –º–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

* **–í—ã—Ö–æ–¥–Ω—ã–µ**: –æ—Ç–¥—ã—Ö –∏–ª–∏ –¥–æ–±–æ—Ä –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ

* **–ò–ò-–ø–æ–ª–∏—Ç–∏–∫–∞**: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏, –Ω–æ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä—É—á–Ω—É—é, –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º –¥–æ–ø—É—â–µ–Ω–∏—è

---

## –î–ï–ù–¨ 0 (–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞)

### –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ü–û –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è

### –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è macOS:

1. **Python 3.9+**

```bash
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é
python3 --version

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ Homebrew (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
brew install python
```

1. **VS Code** - —Å–∫–∞—á–∞—Ç—å —Å [code.visualstudio.com](http://code.visualstudio.com) (macOS –≤–µ—Ä—Å–∏—è)

* –†–∞—Å—à–∏—Ä–µ–Ω–∏—è: Python, SQL Tools, GitLens, Jupyter

1. **Git**

```bash
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É
git --version

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
brew install git

# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å
git config --global user.name "–í–∞—à–µ –ò–º—è"
git config --global user.email "–≤–∞—à@email.com"
```

1. **Tableau Public** (–±–µ—Å–ø–ª–∞—Ç–Ω–æ) - –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç BI

* –°–∫–∞—á–∞—Ç—å —Å [public.tableau.com](http://public.tableau.com) (macOS –≤–µ—Ä—Å–∏—è)

1. **Snowflake –∞–∫–∫–∞—É–Ω—Ç** - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ [snowflake.com](http://snowflake.com) (30-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–∏–∞–ª)

2. **GitHub –∞–∫–∫–∞—É–Ω—Ç** - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π "data-analyst-journey"

3. **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ**: Power BI Service (–≤–µ–±-–≤–µ—Ä—Å–∏—è) - –∏–∑—É—á–∏–º –Ω–∞ 13-–π –Ω–µ–¥–µ–ª–µ

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è

```
data-analyst-journey/
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ week-01/
‚îú‚îÄ‚îÄ week-02/
‚îú‚îÄ‚îÄ ...
‚îú‚îÄ‚îÄ projects/
‚îÇ   ‚îú‚îÄ‚îÄ mini-project-1/
‚îÇ   ‚îú‚îÄ‚îÄ mini-project-2/
‚îÇ   ‚îî‚îÄ‚îÄ portfolio/
‚îú‚îÄ‚îÄ sql-cookbook/
‚îú‚îÄ‚îÄ notebooks/
‚îî‚îÄ‚îÄ docs/
```

---

## –ù–ï–î–ï–õ–Ø 1 ‚Äî –í–≤–µ–¥–µ–Ω–∏–µ, GDA —Å—Ç–∞—Ä—Ç, –±–∞–∑–∞ SQL –∏ Python

### –î–µ–Ω—å 1: –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è

**–¢–µ–æ—Ä–∏—è (45 –º–∏–Ω):**

* –û–±–∑–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ Data Analyst: —Ä–æ–ª–∏, –∑–∞–¥–∞—á–∏, –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø—É—Ç–∏

* –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª: –≤–æ–ø—Ä–æ—Å ‚Üí –¥–∞–Ω–Ω—ã–µ ‚Üí –∞–Ω–∞–ª–∏–∑ ‚Üí –∏–Ω—Å–∞–π—Ç—ã ‚Üí –¥–µ–π—Å—Ç–≤–∏—è

* –ù–∞—á–∞—Ç—å Google Data Analytics –∫—É—Ä—Å –Ω–∞ Coursera (–º–æ–¥—É–ª—å 1)

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (120 –º–∏–Ω):**

1. –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub

2. –ù–∞–ø–∏—Å–∞—Ç—å –ª–∏—á–Ω—ã–µ —Ü–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è (SMART-—Ñ–æ—Ä–º–∞—Ç)

3. –°–æ—Å—Ç–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞

4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –°–æ–∑–¥–∞—Ç—å `README.md` —Å —Ü–µ–ª—è–º–∏ –∏ –ø–ª–∞–Ω–æ–º

* –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä—Å–∏–∏ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

* –°–æ–∑–¥–∞—Ç—å `learning-log.md` –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω

* \[ \] –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç

* \[ \] –¶–µ–ª–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã –∏ –∑–∞–ø–∏—Å–∞–Ω—ã

* \[ \] –ù–∞—á–∞—Ç –∫—É—Ä—Å GDA

### –î–µ–Ω—å 2: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏

**–¢–µ–æ—Ä–∏—è (40 –º–∏–Ω):**

* GDA: —Å–±–æ—Ä, —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö

* –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ vs –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

* –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–ª–Ω–æ—Ç–∞, —Ç–æ—á–Ω–æ—Å—Ç—å, —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (110 –º–∏–Ω):**

1. **Google Sheets/Excel –ø—Ä–∞–∫—Ç–∏–∫–∞:**

* –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç "Sample Superstore" –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π

* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–Ω—ã–º —Å—Ç–æ–ª–±—Ü–∞–º

* –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –¥–∞—Ç–∞–º

* –ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—É–ª—ã: SUM, AVERAGE, COUNT, IF

* –°–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–±–∞–∑–æ–≤—ã–µ)

1. **–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö:**

* –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∏, –¥—É–±–ª–∏–∫–∞—Ç—ã

* –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö

* –í—ã—è–≤–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏-–æ—Ç—á–µ—Ç "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏—Ö –æ—Ü–µ–Ω–∫–∞"

* –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö

* –û–ø–∏—Å–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –û—Å–≤–æ–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Excel/Sheets

* \[ \] –°–æ–∑–¥–∞–Ω–∞ —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞

* \[ \] –ù–∞–ø–∏—Å–∞–Ω –æ—Ç—á–µ—Ç –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö

* \[ \] –í—ã—è–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ

### –î–µ–Ω—å 3: SQL –æ—Å–Ω–æ–≤—ã - SELECT, FROM, WHERE

**–¢–µ–æ—Ä–∏—è (35 –º–∏–Ω):**

* –ß—Ç–æ —Ç–∞–∫–æ–µ SQL –∏ —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –ë–î

* –°—Ç—Ä—É–∫—Ç—É—Ä–∞ SQL-–∑–∞–ø—Ä–æ—Å–∞

* –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (115 –º–∏–Ω):**

1. **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω SQL-–ø–µ—Å–æ—á–Ω–∏—Ü—É** (SQLiteOnline, DB Fiddle)

2. **–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –¥–∞—Ç–∞—Å–µ—Ç** (–Ω–∞–ø—Ä–∏–º–µ—Ä, Northwind –∏–ª–∏ Chinook)

3. **10 –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:**

```sql
-- 1. –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
SELECT * FROM customers;

-- 2. –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
SELECT customer_id, company_name FROM customers;

-- 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–µ
SELECT * FROM customers WHERE country = 'USA';

-- 4. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
SELECT * FROM products WHERE unit_price > 20;

-- 5. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
SELECT * FROM products ORDER BY unit_price;

-- 6. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
SELECT * FROM products ORDER BY unit_price DESC;

-- 7. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
SELECT * FROM products WHERE unit_price > 10 AND category_id = 1;

-- 8. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OR
SELECT * FROM customers WHERE country = 'USA' OR country = 'Canada';

-- 9. –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É
SELECT * FROM customers WHERE company_name LIKE '%Restaurant%';

-- 10. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
SELECT * FROM products ORDER BY unit_price DESC LIMIT 5;
```

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –°–æ–∑–¥–∞—Ç—å `SQL-cookbook.md`

* –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏

* –û–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –í—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤

* \[ \] –ü–æ–Ω—è—Ç–Ω–∞ –ª–æ–≥–∏–∫–∞ WHERE, ORDER BY, LIMIT

* \[ \] –°–æ–∑–¥–∞–Ω SQL-cookbook

* \[ \] –ó–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫

### –î–µ–Ω—å 4: SQL - DISTINCT, –∞–ª–∏–∞—Å—ã, CASE WHEN

**–¢–µ–æ—Ä–∏—è (35 –º–∏–Ω):**

* DISTINCT –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

* –ê–ª–∏–∞—Å—ã –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü

* –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å CASE WHEN

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (115 –º–∏–Ω):**

1. **8-10 –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á:**

```sql
-- 1. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
SELECT DISTINCT country FROM customers;

-- 2. –ê–ª–∏–∞—Å—ã –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤
SELECT company_name AS "Company Name", 
       contact_name AS "Contact" 
FROM customers;

-- 3. –ê–ª–∏–∞—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü
SELECT c.company_name, c.country 
FROM customers AS c 
WHERE c.country = 'Germany';

-- 4. –ü—Ä–æ—Å—Ç–æ–π CASE WHEN
SELECT product_name,
       unit_price,
       CASE 
         WHEN unit_price < 10 THEN 'Cheap'
         WHEN unit_price < 50 THEN 'Medium'
         ELSE 'Expensive'
       END AS price_category
FROM products;

-- 5. CASE —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
SELECT customer_id,
       country,
       CASE 
         WHEN country IN ('USA', 'Canada') THEN 'North America'
         WHEN country IN ('Germany', 'France', 'UK') THEN 'Europe'
         ELSE 'Other'
       END AS region
FROM customers;

-- 6. –ü–æ–¥—Å—á–µ—Ç —Å —É—Å–ª–æ–≤–∏–µ–º
SELECT country,
       COUNT(*) AS total_customers,
       COUNT(CASE WHEN city = 'London' THEN 1 END) AS london_customers
FROM customers
GROUP BY country;

-- 7. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
SELECT product_name,
       unit_price,
       units_in_stock,
       unit_price * units_in_stock AS total_value
FROM products;

-- 8. –†–∞–±–æ—Ç–∞ —Å NULL
SELECT customer_id,
       company_name,
       CASE 
         WHEN region IS NULL THEN 'No Region'
         ELSE region
       END AS region_clean
FROM customers;
```

1. **–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**

* –ó–∞–±—ã—Ç—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∞—Ö

* –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å CASE

* –ü—Ä–æ–±–ª–µ–º—ã —Å NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ SQL-cookbook

* –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª "–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏"

* –ó–∞–ø–∏—Å–∞—Ç—å —Å–ø–æ—Å–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –í—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ 8 –∑–∞–¥–∞—á

* \[ \] –ü–æ–Ω—è—Ç–Ω–∞ –ª–æ–≥–∏–∫–∞ DISTINCT, –∞–ª–∏–∞—Å–æ–≤, CASE

* \[ \] –û–±–Ω–æ–≤–ª–µ–Ω SQL-cookbook

* \[ \] –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏

### –î–µ–Ω—å 5: Python –æ—Å–Ω–æ–≤—ã

**–¢–µ–æ—Ä–∏—è (40 –º–∏–Ω):**

* –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ Python

* –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: —Å–ø–∏—Å–∫–∏, —Å–ª–æ–≤–∞—Ä–∏, –∫–æ—Ä—Ç–µ–∂–∏

* –£—Å–ª–æ–≤–∏—è –∏ —Ü–∏–∫–ª—ã

* –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (110 –º–∏–Ω):**

1. **–°–æ–∑–¥–∞—Ç—å Jupyter notebook `python_basics.ipynb`**

2. **–ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**

```python
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã
name = "Data Analyst"
age = 25
salary = 75000.0
is_employed = True

# –°–ø–∏—Å–∫–∏
skills = ["SQL", "Python", "Tableau", "Excel"]
numbers = [1, 2, 3, 4, 5]

# –°–ª–æ–≤–∞—Ä–∏
employee = {
    "name": "John Doe",
    "department": "Analytics",
    "salary": 75000,
    "skills": ["SQL", "Python"]
}

# –£—Å–ª–æ–≤–∏—è
if salary > 70000:
    print("High salary")
elif salary > 50000:
    print("Medium salary")
else:
    print("Low salary")

# –¶–∏–∫–ª—ã
for skill in skills:
    print(f"I know {skill}")

# –†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
high_salaries = [s for s in [60000, 80000, 45000, 90000] if s > 70000]
```

1. **–†–∞–±–æ—Ç–∞ —Å CSV:**

```python
import pandas as pd

# –ß—Ç–µ–Ω–∏–µ CSV
df = pd.read_csv('sample_data.csv')

# –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print(df.head())
print(df.info())
print(df.describe())

# –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
total_sales = df['sales'].sum()
avg_price = df['price'].mean()
unique_categories = df['category'].nunique()

print(f"Total sales: {total_sales}")
print(f"Average price: {avg_price:.2f}")
print(f"Unique categories: {unique_categories}")
```

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ—É—Ç–±—É–∫ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏

* –î–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑–¥–µ–ª—É

* –°–æ–∑–¥–∞—Ç—å summary —Å –∏–∑—É—á–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –ù–æ—É—Ç–±—É–∫ —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç

* \[ \] –û—Å–≤–æ–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö

* \[ \] –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å CSV

* \[ \] –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏

### –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ 1:

* \[ \] –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã

* \[ \] –ù–∞—á–∞—Ç –∫—É—Ä—Å Google Data Analytics

* \[ \] –°–æ–∑–¥–∞–Ω–æ 20+ –±–∞–∑–æ–≤—ã—Ö SQL-–∑–∞–ø—Ä–æ—Å–æ–≤

* \[ \] –°–æ–∑–¥–∞–Ω –ø–µ—Ä–≤—ã–π Python-–Ω–æ—É—Ç–±—É–∫

* \[ \] –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω

---

## –ù–ï–î–ï–õ–Ø 2 ‚Äî GDA, SQL –¥–∂–æ–π–Ω—ã, Pandas, –ø–µ—Ä–≤—ã–π Tableau

### –î–µ–Ω—å 1: –ë–∏–∑–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞

**–¢–µ–æ—Ä–∏—è (40 –º–∏–Ω):**

* GDA: –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–∑–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å–æ–≤

* SMART-–∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á

* –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞: –¥–∞–Ω–Ω—ã–µ ‚Üí –º–µ—Ç–æ–¥—ã ‚Üí –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (110 –º–∏–Ω):**

1. **–í—ã–±—Ä–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç** (–Ω–∞–ø—Ä–∏–º–µ—Ä, NYC Taxi, Retail Sales, –∏–ª–∏ –∏–∑ Kaggle)

2. **–°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å 5 –±–∏–∑–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å–æ–≤:**

* –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π: "–ö–∞–∫–æ–≤–∞ –æ–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º?"

* –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π: "–ö–∞–∫–æ–π —Ä–µ–≥–∏–æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?"

* –¢—Ä–µ–Ω–¥–æ–≤—ã–π: "–ö–∞–∫ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤?"

* –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π: "–ö–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã?"

* –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π: "–ö–∞–∫–æ–π –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ?"

1. **–î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω:**

* –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ

* SQL-–∑–∞–ø—Ä–æ—Å—ã (–ø—Å–µ–≤–¥–æ–∫–æ–¥)

* –¢–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

* –û–∂–∏–¥–∞–µ–º—ã–µ –∏–Ω—Å–∞–π—Ç—ã

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç "Business Questions & Analysis Plan"

* –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ö–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–Ω–æ –≤ [draw.io](http://draw.io))

* –û–±–æ—Å–Ω–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –í—ã–±—Ä–∞–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–∞—Ç–∞—Å–µ—Ç

* \[ \] –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã 5 SMART-–≤–æ–ø—Ä–æ—Å–æ–≤

* \[ \] –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ

* \[ \] –°—Ö–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞

### –î–µ–Ω—å 2: SQL –¥–∂–æ–π–Ω—ã - INNER –∏ LEFT

**–¢–µ–æ—Ä–∏—è (35 –º–∏–Ω):**

* –ö–æ–Ω—Ü–µ–ø—Ü–∏—è –¥–∂–æ–π–Ω–æ–≤ –∏ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏

* INNER JOIN: —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏

* LEFT JOIN: –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã

* –ö–ª—é—á–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∏ –∏—Ö —Ç–∏–ø—ã

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (115 –º–∏–Ω):**

1. **–†–∞–±–æ—Ç–∞ —Å 2-3 —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏** (Customers, Orders, Products)

2. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã:**

```sql
-- 1. INNER JOIN - –∫–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
SELECT c.company_name, o.order_date, o.order_id
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id;

-- 2. LEFT JOIN - –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã (–≤–∫–ª—é—á–∞—è –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤)
SELECT c.company_name, 
       COUNT(o.order_id) AS order_count
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.company_name;

-- 3. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∂–æ–π–Ω—ã
SELECT c.company_name,
       o.order_date,
       p.product_name,
       od.quantity,
       od.unit_price
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
INNER JOIN order_details od ON o.order_id = od.order_id
INNER JOIN products p ON od.product_id = p.product_id;

-- 4. –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å –¥–∂–æ–π–Ω–∞–º–∏
SELECT c.country,
       COUNT(DISTINCT c.customer_id) AS customers,
       COUNT(o.order_id) AS total_orders,
       SUM(od.quantity * od.unit_price) AS total_revenue
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
LEFT JOIN order_details od ON o.order_id = od.order_id
GROUP BY c.country
ORDER BY total_revenue DESC;
```

1. **–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã:**

```sql
-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–∂–æ–π–Ω–∞
SELECT customer_id, COUNT(*) as count
FROM (
    SELECT DISTINCT c.customer_id, o.order_id
    FROM customers c
    INNER JOIN orders o ON c.customer_id = o.customer_id
) subquery
GROUP BY customer_id
HAVING COUNT(*) > 1;
```

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∂–æ–π–Ω–æ–≤ –≤ SQL-cookbook

* –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∂–æ–π–Ω–æ–≤"

* –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –í—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —Å –¥–∂–æ–π–Ω–∞–º–∏

* \[ \] –ü–æ–Ω—è—Ç–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É INNER –∏ LEFT JOIN

* \[ \] –ü—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã

* \[ \] –û–±–Ω–æ–≤–ª–µ–Ω SQL-cookbook

### –î–µ–Ω—å 3: SQL –¥–∂–æ–π–Ω—ã - RIGHT, FULL, SELF –∏ NULL-–ª–æ–≥–∏–∫–∞

**–¢–µ–æ—Ä–∏—è (35 –º–∏–Ω):**

* RIGHT JOIN –∏ FULL OUTER JOIN

* SELF JOIN –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

* –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å NULL –≤ –¥–∂–æ–π–Ω–∞—Ö

* –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∂–æ–π–Ω–æ–≤

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (115 –º–∏–Ω):**

1. **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –¥–∂–æ–π–Ω—ã:**

```sql
-- 1. RIGHT JOIN (—Ä–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
SELECT c.company_name, o.order_date
FROM orders o
RIGHT JOIN customers c ON o.customer_id = c.customer_id;

-- 2. FULL OUTER JOIN (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
SELECT COALESCE(c.customer_id, o.customer_id) as customer_id,
       c.company_name,
       o.order_date
FROM customers c
FULL OUTER JOIN orders o ON c.customer_id = o.customer_id;

-- 3. SELF JOIN - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ –∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ã
SELECT e1.employee_id,
       e1.first_name + ' ' + e1.last_name AS employee,
       e2.first_name + ' ' + e2.last_name AS manager
FROM employees e1
LEFT JOIN employees e2 ON e1.reports_to = e2.employee_id;

-- 4. –†–∞–±–æ—Ç–∞ —Å NULL
SELECT c.company_name,
       CASE 
         WHEN o.order_id IS NULL THEN 'No Orders'
         ELSE 'Has Orders'
       END AS order_status
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id;
```

1. **–ö–µ–π—Å "–ü–æ—á–µ–º—É –ø—Ä–æ–ø–∞–ª–∏ —Å—Ç—Ä–æ–∫–∏":**

```sql
-- –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
SELECT COUNT(*) FROM customers; -- –Ω–∞–ø—Ä–∏–º–µ—Ä, 91
SELECT COUNT(*) FROM orders;    -- –Ω–∞–ø—Ä–∏–º–µ—Ä, 830

-- INNER JOIN
SELECT COUNT(*) FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id; -- 830

-- LEFT JOIN
SELECT COUNT(*) FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id; -- 832 (–¥—É–±–ª–∏–∫–∞—Ç—ã)

-- –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω
SELECT c.customer_id, c.company_name, COUNT(o.order_id) as order_count
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.company_name
HAVING COUNT(o.order_id) = 0; -- –∫–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤
```

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –°–æ–∑–¥–∞—Ç—å –∫–µ–π—Å-—Å—Ç–∞–¥–∏ "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø–∞–≤—à–∏—Ö —Å—Ç—Ä–æ–∫"

* –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å NULL-–ª–æ–≥–∏–∫—É –≤ –¥–∂–æ–π–Ω–∞—Ö

* –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∂–æ–π–Ω–æ–≤

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –û—Å–≤–æ–µ–Ω—ã –≤—Å–µ —Ç–∏–ø—ã –¥–∂–æ–π–Ω–æ–≤

* \[ \] –ü–æ–Ω—è—Ç–Ω–∞ NULL-–ª–æ–≥–∏–∫–∞

* \[ \] –ü—Ä–æ–≤–µ–¥–µ–Ω –∞–Ω–∞–ª–∏–∑ "–ø—Ä–æ–ø–∞–≤—à–∏—Ö —Å—Ç—Ä–æ–∫"

* \[ \] –°–æ–∑–¥–∞–Ω —á–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏

### –î–µ–Ω—å 4: Python Pandas - –æ—Å–Ω–æ–≤—ã EDA

**–¢–µ–æ—Ä–∏—è (40 –º–∏–Ω):**

* Pandas: Series –∏ DataFrame

* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã: head, info, describe

* –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è

* Exploratory Data Analysis (EDA)

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (110 –º–∏–Ω):**

1. **–°–æ–∑–¥–∞—Ç—å –Ω–æ—É—Ç–±—É–∫ `eda_day1.ipynb`**

2. **–ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ Pandas:**

```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv('your_dataset.csv')

# –ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä
print("Shape:", df.shape)
print("\nInfo:")
print(df.info())
print("\nFirst 5 rows:")
print(df.head())
print("\nLast 5 rows:")
print(df.tail())

# –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print("\nDescriptive statistics:")
print(df.describe())
print("\nDescriptive statistics for objects:")
print(df.describe(include='object'))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
print("\nMissing values:")
print(df.isnull().sum())
print("\nMissing values percentage:")
print((df.isnull().sum() / len(df)) * 100)

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
for col in df.select_dtypes(include='object').columns:
    print(f"\n{col}: {df[col].nunique()} unique values")
    if df[col].nunique() < 10:
        print(df[col].value_counts())

# –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
high_value = df[df['price'] > df['price'].quantile(0.75)]
recent_data = df[df['date'] > '2023-01-01']

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
category_stats = df.groupby('category').agg({
    'price': ['mean', 'median', 'count'],
    'quantity': 'sum'
}).round(2)
print("\nCategory statistics:")
print(category_stats)
```

1. **–ü—Ä–æ—Å—Ç—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:**

```python
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
plt.style.use('seaborn-v0_8')
fig, axes = plt.subplots(2, 2, figsize=(12, 10))

# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
df['price'].hist(bins=30, ax=axes[0,0])
axes[0,0].set_title('Price Distribution')

# Box plot
df.boxplot(column='price', by='category', ax=axes[0,1])
axes[0,1].set_title('Price by Category')

# Scatter plot
axes[1,0].scatter(df['quantity'], df['price'])
axes[1,0].set_xlabel('Quantity')
axes[1,0].set_ylabel('Price')
axes[1,0].set_title('Quantity vs Price')

# Bar plot
df['category'].value_counts().plot(kind='bar', ax=axes[1,1])
axes[1,1].set_title('Category Counts')

plt.tight_layout()
plt.show()
```

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –î–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑–¥–µ–ª—É –∞–Ω–∞–ª–∏–∑–∞

* –°–æ–∑–¥–∞—Ç—å summary —Å –∫–ª—é—á–µ–≤—ã–º–∏ –Ω–∞—Ö–æ–¥–∫–∞–º–∏

* –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –ù–æ—É—Ç–±—É–∫ —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω

* \[ \] –ü—Ä–æ–≤–µ–¥–µ–Ω –ø–æ–ª–Ω—ã–π EDA

* \[ \] –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

* \[ \] –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã –≤—ã–≤–æ–¥—ã

### –î–µ–Ω—å 5: –ü–µ—Ä–≤—ã–π –¥–∞—à–±–æ—Ä–¥ –≤ Tableau

**–¢–µ–æ—Ä–∏—è (35 –º–∏–Ω):**

* –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Tableau Desktop/Public

* –¢–∏–ø—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –¥–∞–Ω–Ω—ã–º

* –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ

* –ü—Ä–∏–Ω—Ü–∏–ø—ã –¥–∏–∑–∞–π–Ω–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (115 –º–∏–Ω):**

1. **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞–Ω–Ω—ã–º:**

* –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV-—Ñ–∞–π–ª –≤ Tableau

* –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö

* –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

1. **–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π:**

```
–ì—Ä–∞—Ñ–∏–∫ 1: –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (Line Chart)
- Dimensions: Date (continuous)
- Measures: Sales (SUM)
- –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–¥-–ª–∏–Ω–∏—é

–ì—Ä–∞—Ñ–∏–∫ 2: –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (Bar Chart)
- Dimensions: Category
- Measures: Sales (SUM)
- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
- –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
```

1. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**

* –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

* –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É

* –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ (tooltips)

* –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –∏ –¥–∞—Ç

1. **–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞:**

* –û–±—ä–µ–¥–∏–Ω–∏—Ç—å 2 –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –æ–¥–Ω–æ–π –ø–∞–Ω–µ–ª–∏

* –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ

* –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ

* –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–∞—à–±–æ—Ä–¥–∞

1. **–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Tableau Public:**

* –°–æ—Ö—Ä–∞–Ω–∏—Ç—å workbook

* –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ Tableau Public

* –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –°–æ–∑–¥–∞—Ç—å README –¥–ª—è Tableau –ø—Ä–æ–µ–∫—Ç–∞

* –û–ø–∏—Å–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞

* –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ Tableau

* \[ \] –°–æ–∑–¥–∞–Ω—ã 2 –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞

* \[ \] –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

* \[ \] –î–∞—à–±–æ—Ä–¥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Tableau Public

### –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ 2:

* \[ \] –û—Å–≤–æ–µ–Ω—ã –≤—Å–µ —Ç–∏–ø—ã SQL –¥–∂–æ–π–Ω–æ–≤

* \[ \] –°–æ–∑–¥–∞–Ω –ø–µ—Ä–≤—ã–π EDA-–Ω–æ—É—Ç–±—É–∫ –≤ Pandas

* \[ \] –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–µ—Ä–≤—ã–π –¥–∞—à–±–æ—Ä–¥ –≤ Tableau

* \[ \] –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã –±–∏–∑–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

---

## –ù–ï–î–ï–õ–Ø 3 ‚Äî Snowflake –æ—Å–Ω–æ–≤—ã, –∞–≥—Ä–µ–≥–∞—Ç—ã –∏ –æ–∫–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

### –î–µ–Ω—å 1: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å–æ Snowflake

**–¢–µ–æ—Ä–∏—è (40 –º–∏–Ω):**

* –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Snowflake: storage, compute, services

* –ö–æ–Ω—Ü–µ–ø—Ü–∏–∏: warehouse, database, schema, —Ä–æ–ª–∏

* Query Profile –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤

* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (110 –º–∏–Ω):**

1. **–ü–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:**

```sql
-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
SELECT CURRENT_VERSION();
SELECT CURRENT_USER(), CURRENT_ROLE(), CURRENT_WAREHOUSE();

-- –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
SHOW DATABASES;
USE DATABASE SNOWFLAKE_SAMPLE_DATA;
SHOW SCHEMAS;
```

1. **–†–∞–±–æ—Ç–∞ —Å SNOWFLAKE_SAMPLE_DATA:**

```sql
-- 1. –û–±–∑–æ—Ä —Å—Ö–µ–º—ã TPCH_SF1
USE SCHEMA SNOWFLAKE_SAMPLE_DATA.TPCH_SF1;
SHOW TABLES;

-- 2. –ò–∑—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü
DESCRIBE TABLE CUSTOMER;
DESCRIBE TABLE ORDERS;
DESCRIBE TABLE LINEITEM;

-- 3. –ë–∞–∑–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
SELECT COUNT(*) FROM CUSTOMER;
SELECT COUNT(*) FROM ORDERS;
SELECT COUNT(*) FROM LINEITEM;

-- 4. –ü–µ—Ä–≤—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
SELECT C_MKTSEGMENT, COUNT(*) as customer_count
FROM CUSTOMER
GROUP BY C_MKTSEGMENT
ORDER BY customer_count DESC;

-- 5. –ê–Ω–∞–ª–∏–∑ Query Profile
SELECT O_ORDERSTATUS, 
       COUNT(*) as order_count,
       SUM(O_TOTALPRICE) as total_value
FROM ORDERS
GROUP BY O_ORDERSTATUS;
```

1. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ warehouse:**

```sql
-- –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ warehouse
CREATE WAREHOUSE IF NOT EXISTS MY_WH
WITH WAREHOUSE_SIZE = 'X-SMALL'
AUTO_SUSPEND = 60
AUTO_RESUME = TRUE;

USE WAREHOUSE MY_WH;
```

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –°–æ–∑–¥–∞—Ç—å "Snowflake Setup Guide"

* –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É sample –¥–∞–Ω–Ω—ã—Ö

* –ó–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Snowflake

* \[ \] –í—ã–ø–æ–ª–Ω–µ–Ω—ã 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ sample data

* \[ \] –ò–∑—É—á–µ–Ω Query Profile

* \[ \] –°–æ–∑–¥–∞–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π warehouse

### –î–µ–Ω—å 2: SQL –∞–≥—Ä–µ–≥–∞—Ç—ã –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞

**–¢–µ–æ—Ä–∏—è (35 –º–∏–Ω):**

* –ê–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: COUNT, SUM, AVG, MIN, MAX

* GROUP BY –∏ HAVING

* –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏

* –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (115 –º–∏–Ω):**

1. **–ë–∞–∑–æ–≤—ã–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:**

```sql
-- 1. –ü—Ä–æ—Å—Ç—ã–µ –∞–≥—Ä–µ–≥–∞—Ç—ã
SELECT COUNT(*) as total_orders,
       SUM(O_TOTALPRICE) as total_revenue,
       AVG(O_TOTALPRICE) as avg_order_value,
       MIN(O_ORDERDATE) as first_order,
       MAX(O_ORDERDATE) as last_order
FROM ORDERS;

-- 2. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—é
SELECT O_ORDERSTATUS,
       COUNT(*) as order_count,
       SUM(O_TOTALPRICE) as total_revenue,
       AVG(O_TOTALPRICE) as avg_order_value
FROM ORDERS
GROUP BY O_ORDERSTATUS
ORDER BY total_revenue DESC;

-- 3. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
SELECT DATE_TRUNC('MONTH', O_ORDERDATE) as order_month,
       COUNT(*) as orders,
       SUM(O_TOTALPRICE) as revenue
FROM ORDERS
GROUP BY DATE_TRUNC('MONTH', O_ORDERDATE)
ORDER BY order_month;

-- 4. –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
SELECT O_ORDERSTATUS,
       YEAR(O_ORDERDATE) as order_year,
       COUNT(*) as order_count,
       SUM(O_TOTALPRICE) as total_revenue
FROM ORDERS
GROUP BY O_ORDERSTATUS, YEAR(O_ORDERDATE)
ORDER BY order_year, O_ORDERSTATUS;
```

1. **HAVING –∏ —É—Å–ª–æ–≤–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è:**

```sql
-- 5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤
SELECT C_MKTSEGMENT,
       COUNT(*) as customer_count
FROM CUSTOMER
GROUP BY C_MKTSEGMENT
HAVING COUNT(*) > 10000
ORDER BY customer_count DESC;

-- 6. –£—Å–ª–æ–≤–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è
SELECT O_ORDERSTATUS,
       COUNT(*) as total_orders,
       COUNT(CASE WHEN O_TOTALPRICE > 100000 THEN 1 END) as high_value_orders,
       SUM(CASE WHEN O_TOTALPRICE > 100000 THEN O_TOTALPRICE ELSE 0 END) as high_value_revenue
FROM ORDERS
GROUP BY O_ORDERSTATUS;
```

1. **–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã:**

```sql
-- 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö
-- –û–±—â–∞—è —Å—É–º–º–∞
SELECT SUM(O_TOTALPRICE) as total_check FROM ORDERS;

-- –°—É–º–º–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
SELECT SUM(group_total) as total_check_grouped
FROM (
    SELECT O_ORDERSTATUS, SUM(O_TOTALPRICE) as group_total
    FROM ORDERS
    GROUP BY O_ORDERSTATUS
);

-- –î–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å!
```

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –≤ SQL-cookbook

* –°–æ–∑–¥–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º

* –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å GROUP BY

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –í—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π

* \[ \] –ü–æ–Ω—è—Ç–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É WHERE –∏ HAVING

* \[ \] –ü—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º

* \[ \] –û—Å–≤–æ–µ–Ω–∞ —É—Å–ª–æ–≤–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è

### –î–µ–Ω—å 3: –û–∫–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ I - —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ

**–¢–µ–æ—Ä–∏—è (40 –º–∏–Ω):**

* –ö–æ–Ω—Ü–µ–ø—Ü–∏—è –æ–∫–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

* PARTITION BY vs GROUP BY

* –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è: ROW_NUMBER, RANK, DENSE_RANK

* –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (110 –º–∏–Ω):**

1. **–ë–∞–∑–æ–≤—ã–µ –æ–∫–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**

```sql
-- 1. ROW_NUMBER - —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
SELECT C_CUSTKEY,
       C_NAME,
       C_ACCTBAL,
       ROW_NUMBER() OVER (ORDER BY C_ACCTBAL DESC) as row_num
FROM CUSTOMER
ORDER BY C_ACCTBAL DESC
LIMIT 10;

-- 2. RANK - —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏
SELECT C_CUSTKEY,
       C_NAME,
       C_ACCTBAL,
       RANK() OVER (ORDER BY C_ACCTBAL DESC) as rank_num
FROM CUSTOMER
ORDER BY C_ACCTBAL DESC
LIMIT 10;

-- 3. DENSE_RANK - —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
SELECT C_CUSTKEY,
       C_NAME,
       C_ACCTBAL,
       DENSE_RANK() OVER (ORDER BY C_ACCTBAL DESC) as dense_rank_num
FROM CUSTOMER
ORDER BY C_ACCTBAL DESC
LIMIT 10;
```

1. **PARTITION BY - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤ –æ–∫–Ω–∞—Ö:**

```sql
-- 4. –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
SELECT C_MKTSEGMENT,
       C_NAME,
       C_ACCTBAL,
       ROW_NUMBER() OVER (PARTITION BY C_MKTSEGMENT ORDER BY C_ACCTBAL DESC) as rank_in_segment
FROM CUSTOMER
QUALIFY rank_in_segment <= 3
ORDER BY C_MKTSEGMENT, rank_in_segment;

-- 5. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–±—â–∏–º —Ä–∞–Ω–≥–æ–º
SELECT C_MKTSEGMENT,
       C_NAME,
       C_ACCTBAL,
       ROW_NUMBER() OVER (ORDER BY C_ACCTBAL DESC) as overall_rank,
       ROW_NUMBER() OVER (PARTITION BY C_MKTSEGMENT ORDER BY C_ACCTBAL DESC) as segment_rank
FROM CUSTOMER
QUALIFY overall_rank <= 20 OR segment_rank <= 3
ORDER BY overall_rank;
```

1. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ "—Ç–æ–ø-N –ø–æ –≥—Ä—É–ø–ø–µ":**

```sql
-- 6. –¢–æ–ø-3 –∑–∞–∫–∞–∑–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
SELECT C_NAME,
       O_ORDERKEY,
       O_TOTALPRICE,
       ROW_NUMBER() OVER (PARTITION BY O_CUSTKEY ORDER BY O_TOTALPRICE DESC) as order_rank
FROM ORDERS o
JOIN CUSTOMER c ON o.O_CUSTKEY = c.C_CUSTKEY
QUALIFY order_rank <= 3
ORDER BY C_NAME, order_rank;

-- 7. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
SELECT C_NAME,
       O_ORDERKEY,
       O_ORDERDATE,
       O_TOTALPRICE
FROM (
    SELECT c.C_NAME,
           o.O_ORDERKEY,
           o.O_ORDERDATE,
           o.O_TOTALPRICE,
           ROW_NUMBER() OVER (PARTITION BY o.O_CUSTKEY ORDER BY o.O_ORDERDATE DESC) as rn
    FROM ORDERS o
    JOIN CUSTOMER c ON o.O_CUSTKEY = c.C_CUSTKEY
)
WHERE rn = 1
ORDER BY O_ORDERDATE DESC;
```

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª "Window Functions" –≤ SQL-cookbook

* –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–ø-N –∑–∞–¥–∞—á

* –û–±—ä—è—Å–Ω–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É RANK —Ñ—É–Ω–∫—Ü–∏—è–º–∏

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –ü–æ–Ω—è—Ç–Ω–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –æ–∫–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

* \[ \] –û—Å–≤–æ–µ–Ω—ã ROW_NUMBER, RANK, DENSE_RANK

* \[ \] –†–µ—à–µ–Ω—ã –∑–∞–¥–∞—á–∏ "—Ç–æ–ø-N –ø–æ –≥—Ä—É–ø–ø–µ"

* \[ \] –ü–æ–Ω—è—Ç–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É PARTITION BY –∏ GROUP BY

### –î–µ–Ω—å 4: –û–∫–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ II - –∞–≥—Ä–µ–≥–∞—Ç—ã –∏ —Å–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞

**–¢–µ–æ—Ä–∏—è (40 –º–∏–Ω):**

* –ê–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–∫–Ω–∞—Ö

* ORDER BY –≤ –æ–∫–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö

* –°–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞: ROWS –∏ RANGE

* –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (110 –º–∏–Ω):**

1. **–ê–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–∫–Ω–∞—Ö:**

```sql
-- 1. –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞
SELECT O_ORDERDATE,
       O_TOTALPRICE,
       SUM(O_TOTALPRICE) OVER (ORDER BY O_ORDERDATE) as running_total
FROM ORDERS
ORDER BY O_ORDERDATE
LIMIT 20;

-- 2. –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–π —Å—É–º–º—ã
SELECT O_ORDERSTATUS,
       O_TOTALPRICE,
       O_TOTALPRICE / SUM(O_TOTALPRICE) OVER () * 100 as pct_of_total,
       O_TOTALPRICE / SUM(O_TOTALPRICE) OVER (PARTITION BY O_ORDERSTATUS) * 100 as pct_of_status
FROM ORDERS
ORDER BY O_TOTALPRICE DESC
LIMIT 20;

-- 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å—Ä–µ–¥–Ω–∏–º
SELECT C_MKTSEGMENT,
       C_ACCTBAL,
       AVG(C_ACCTBAL) OVER () as overall_avg,
       AVG(C_ACCTBAL) OVER (PARTITION BY C_MKTSEGMENT) as segment_avg,
       C_ACCTBAL - AVG(C_ACCTBAL) OVER (PARTITION BY C_MKTSEGMENT) as diff_from_segment_avg
FROM CUSTOMER
ORDER BY C_MKTSEGMENT, C_ACCTBAL DESC;
```

1. **–°–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞:**

```sql
-- 4. –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (3 –ø–µ—Ä–∏–æ–¥–∞)
SELECT DATE_TRUNC('MONTH', O_ORDERDATE) as order_month,
       COUNT(*) as monthly_orders,
       AVG(COUNT(*)) OVER (
           ORDER BY DATE_TRUNC('MONTH', O_ORDERDATE)
           ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
       ) as moving_avg_3m
FROM ORDERS
GROUP BY DATE_TRUNC('MONTH', O_ORDERDATE)
ORDER BY order_month;

-- 5. –°–∫–æ–ª—å–∑—è—â–∞—è —Å—É–º–º–∞ –≤—ã—Ä—É—á–∫–∏
SELECT DATE_TRUNC('MONTH', O_ORDERDATE) as order_month,
       SUM(O_TOTALPRICE) as monthly_revenue,
       SUM(SUM(O_TOTALPRICE)) OVER (
           ORDER BY DATE_TRUNC('MONTH', O_ORDERDATE)
           ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
       ) as rolling_3m_revenue
FROM ORDERS
GROUP BY DATE_TRUNC('MONTH', O_ORDERDATE)
ORDER BY order_month;

-- 6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
SELECT DATE_TRUNC('MONTH', O_ORDERDATE) as order_month,
       SUM(O_TOTALPRICE) as monthly_revenue,
       LAG(SUM(O_TOTALPRICE), 1) OVER (ORDER BY DATE_TRUNC('MONTH', O_ORDERDATE)) as prev_month_revenue,
       SUM(O_TOTALPRICE) - LAG(SUM(O_TOTALPRICE), 1) OVER (ORDER BY DATE_TRUNC('MONTH', O_ORDERDATE)) as month_over_month_change
FROM ORDERS
GROUP BY DATE_TRUNC('MONTH', O_ORDERDATE)
ORDER BY order_month;
```

1. **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–µ–π—Å—ã:**

```sql
-- 7. –ê–Ω–∞–ª–∏–∑ —Ä–æ—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
WITH customer_first_order AS (
    SELECT O_CUSTKEY,
           MIN(O_ORDERDATE) as first_order_date
    FROM ORDERS
    GROUP BY O_CUSTKEY
)
SELECT DATE_TRUNC('MONTH', first_order_date) as cohort_month,
       COUNT(*) as new_customers,
       SUM(COUNT(*)) OVER (ORDER BY DATE_TRUNC('MONTH', first_order_date)) as cumulative_customers
FROM customer_first_order
GROUP BY DATE_TRUNC('MONTH', first_order_date)
ORDER BY cohort_month;
```

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å–∫–æ–ª—å–∑—è—â–∏—Ö –æ–∫–æ–Ω –≤ cookbook

* –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á

* –û–±—ä—è—Å–Ω–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É ROWS –∏ RANGE

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –û—Å–≤–æ–µ–Ω—ã –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ–∫–Ω–∞—Ö

* \[ \] –°–æ–∑–¥–∞–Ω—ã —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –∏ —Å—É–º–º—ã

* \[ \] –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏

* \[ \] –ü–æ–Ω—è—Ç–Ω–∞ –ª–æ–≥–∏–∫–∞ ORDER BY –≤ –æ–∫–Ω–∞—Ö

### –î–µ–Ω—å 5: Python EDA II - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑

**–¢–µ–æ—Ä–∏—è (40 –º–∏–Ω):**

* –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏: —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏

* –í—ã—è–≤–ª–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤

* –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö

* –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (110 –º–∏–Ω):**

1. **–°–æ–∑–¥–∞—Ç—å –Ω–æ—É—Ç–±—É–∫ `advanced_eda.ipynb`**

2. **–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤:**

```python
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv('your_dataset.csv')

# –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
missing_data = df.isnull().sum()
missing_percent = (missing_data / len(df)) * 100
missing_df = pd.DataFrame({
    'Missing Count': missing_data,
    'Missing Percentage': missing_percent
}).sort_values('Missing Percentage', ascending=False)

print("Missing Data Analysis:")
print(missing_df[missing_df['Missing Count'] > 0])

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
plt.figure(figsize=(12, 6))
sns.heatmap(df.isnull(), cbar=True, yticklabels=False)
plt.title('Missing Data Heatmap')
plt.show()

# –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
# –ß–∏—Å–ª–æ–≤—ã–µ - –º–µ–¥–∏–∞–Ω–∞/—Å—Ä–µ–¥–Ω–µ–µ
df['price_filled'] = df['price'].fillna(df['price'].median())

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ - –º–æ–¥–∞ –∏–ª–∏ 'Unknown'
df['category_filled'] = df['category'].fillna(df['category'].mode()[0])

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–ª–∞–≥–∞ –ø—Ä–æ–ø—É—Å–∫–∞
df['price_was_missing'] = df['price'].isnull().astype(int)
```

1. **–í—ã—è–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤:**

```python
# –ú–µ—Ç–æ–¥ IQR
def detect_outliers_iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return (data < lower_bound) | (data > upper_bound)

# Z-score –º–µ—Ç–æ–¥
def detect_outliers_zscore(data, threshold=3):
    z_scores = np.abs(stats.zscore(data.dropna()))
    return z_scores > threshold

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ —á–∏—Å–ª–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–∞–º
numeric_cols = df.select_dtypes(include=[np.number]).columns

for col in numeric_cols:
    outliers_iqr = detect_outliers_iqr(df[col])
    outliers_zscore = detect_outliers_zscore(df[col])
    
    print(f"\n{col}:")
    print(f"IQR outliers: {outliers_iqr.sum()}")
    print(f"Z-score outliers: {outliers_zscore.sum()}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    fig, axes = plt.subplots(1, 2, figsize=(12, 4))
    
    # Box plot
    df[col].plot(kind='box', ax=axes[0])
    axes[0].set_title(f'{col} - Box Plot')
    
    # Histogram
    df[col].hist(bins=30, ax=axes[1])
    axes[1].set_title(f'{col} - Distribution')
    
    plt.tight_layout()
    plt.show()
```

1. **–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è:**

```python
# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
df['date'] = pd.to_datetime(df['date'])
df['year'] = df['date'].dt.year
df['month'] = df['date'].dt.month
df['day_of_week'] = df['date'].dt.day_name()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
df['price_category'] = pd.cut(df['price'], 
                             bins=[0, 50, 100, 200, float('inf')],
                             labels=['Low', 'Medium', 'High', 'Premium'])

# –ö–≤–∞–Ω—Ç–∏–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
df['price_quartile'] = pd.qcut(df['price'], q=4, labels=['Q1', 'Q2', 'Q3', 'Q4'])

# –ë–∏–Ω–∞—Ä–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
df['is_weekend'] = df['day_of_week'].isin(['Saturday', 'Sunday']).astype(int)
df['is_high_value'] = (df['price'] > df['price'].quantile(0.8)).astype(int)

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
df_encoded = pd.get_dummies(df, columns=['category'], prefix='cat')

print("New columns created:")
print([col for col in df.columns if col not in df.columns])
```

1. **–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏-–æ—Ç—á–µ—Ç–∞:**

```python
# –°–≤–æ–¥–∫–∞ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
report = {
    'Original shape': df.shape,
    'Missing values handled': missing_df[missing_df['Missing Count'] > 0].shape[0],
    'Outliers detected': sum([detect_outliers_iqr(df[col]).sum() for col in numeric_cols]),
    'New features created': len([col for col in df.columns if '_category' in col or '_quartile' in col]),
    'Data types': df.dtypes.value_counts().to_dict()
}

print("Data Processing Report:")
for key, value in report.items():
    print(f"{key}: {value}")

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
plt.figure(figsize=(10, 8))
correlation_matrix = df.select_dtypes(include=[np.number]).corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Matrix')
plt.show()
```

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –°–æ–∑–¥–∞—Ç—å summary —Å –∫–ª—é—á–µ–≤—ã–º–∏ –Ω–∞—Ö–æ–¥–∫–∞–º–∏

* –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∏ –≤—ã–±—Ä–æ—Å–æ–≤

* –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –ü—Ä–æ–≤–µ–¥–µ–Ω –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∏ –≤—ã–±—Ä–æ—Å–æ–≤

* \[ \] –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö

* \[ \] –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏

* \[ \] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –º–∏–Ω–∏-–æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏

### –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ 3:

* \[ \] –û—Å–≤–æ–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –≤ Snowflake

* \[ \] –í—ã–ø–æ–ª–Ω–µ–Ω–æ 25+ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≥—Ä–µ–≥–∞—Ç–∞–º–∏ –∏ –æ–∫–Ω–∞–º–∏

* \[ \] –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π EDA-–Ω–æ—É—Ç–±—É–∫

* \[ \] –ü–æ–Ω—è—Ç–Ω—ã –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–∫–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

---

## –ù–ï–î–ï–õ–Ø 4 ‚Äî JSON –¥–∞–Ω–Ω—ã–µ, CTE, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Tableau

### –î–µ–Ω—å 1: –ü–æ–ª—É—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Snowflake

**–¢–µ–æ—Ä–∏—è (40 –º–∏–Ω):**

* VARIANT —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ Snowflake

* –†–∞–±–æ—Ç–∞ —Å JSON: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π, –º–∞—Å—Å–∏–≤—ã, –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã

* LATERAL FLATTEN –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–æ–≤

* –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è JSON –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (110 –º–∏–Ω):**

1. **–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö JSON –¥–∞–Ω–Ω—ã—Ö:**

```sql
-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å JSON –¥–∞–Ω–Ω—ã–º–∏
CREATE OR REPLACE TABLE events_json (
    event_id INT,
    event_data VARIANT,
    created_at TIMESTAMP
);

-- –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
INSERT INTO events_json VALUES
(1, PARSE_JSON('{"user_id": 123, "event_type": "purchase", "amount": 99.99, "items": [{"product": "laptop", "qty": 1}, {"product": "mouse", "qty": 2}], "metadata": {"source": "web", "campaign": "summer_sale"}}'), CURRENT_TIMESTAMP()),
(2, PARSE_JSON('{"user_id": 456, "event_type": "view", "page": "/products", "metadata": {"source": "mobile", "referrer": "google"}}'), CURRENT_TIMESTAMP()),
(3, PARSE_JSON('{"user_id": 789, "event_type": "purchase", "amount": 149.50, "items": [{"product": "phone", "qty": 1}], "metadata": {"source": "web"}}'), CURRENT_TIMESTAMP());
```

1. **–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏–∑ JSON:**

```sql
-- 1. –ë–∞–∑–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π
SELECT event_id,
       event_data:user_id::INT as user_id,
       event_data:event_type::STRING as event_type,
       event_data:amount::FLOAT as amount,
       event_data:metadata:source::STRING as source
FROM events_json;

-- 2. –†–∞–±–æ—Ç–∞ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
SELECT event_id,
       event_data:user_id::INT as user_id,
       event_data:metadata:source::STRING as source,
       event_data:metadata:campaign::STRING as campaign,
       event_data:metadata:referrer::STRING as referrer
FROM events_json;

-- 3. –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å JSON
SELECT event_id,
       event_data:user_id::INT as user_id,
       CASE 
         WHEN event_data:event_type::STRING = 'purchase' THEN 'Revenue'
         WHEN event_data:event_type::STRING = 'view' THEN 'Engagement'
         ELSE 'Other'
       END as event_category
FROM events_json;
```

1. **LATERAL FLATTEN –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤:**

```sql
-- 4. –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ items
SELECT e.event_id,
       e.event_data:user_id::INT as user_id,
       f.value:product::STRING as product,
       f.value:qty::INT as quantity
FROM events_json e,
LATERAL FLATTEN(input => e.event_data:items) f
WHERE e.event_data:items IS NOT NULL;

-- 5. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º –¥–∞–Ω–Ω—ã–º
SELECT f.value:product::STRING as product,
       SUM(f.value:qty::INT) as total_quantity,
       COUNT(*) as order_count
FROM events_json e,
LATERAL FLATTEN(input => e.event_data:items) f
WHERE e.event_data:items IS NOT NULL
GROUP BY f.value:product::STRING
ORDER BY total_quantity DESC;

-- 6. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±—ã—Ç–∏–π
CREATE OR REPLACE TABLE events_flat AS
SELECT e.event_id,
       e.event_data:user_id::INT as user_id,
       e.event_data:event_type::STRING as event_type,
       e.event_data:amount::FLOAT as amount,
       e.event_data:metadata:source::STRING as source,
       e.event_data:metadata:campaign::STRING as campaign,
       COALESCE(f.value:product::STRING, 'N/A') as product,
       COALESCE(f.value:qty::INT, 0) as quantity,
       e.created_at
FROM events_json e
LEFT JOIN LATERAL FLATTEN(input => e.event_data:items, OUTER => TRUE) f;

SELECT * FROM events_flat;
```

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª "JSON Processing" –≤ SQL-cookbook

* –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–±–æ—Ç—ã —Å VARIANT

* –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ç–∏–ø–∏—á–Ω—ã—Ö JSON —Å—Ç—Ä—É–∫—Ç—É—Ä

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ JSON –¥–∞–Ω–Ω—ã–µ

* \[ \] –û—Å–≤–æ–µ–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –∏–∑ JSON

* \[ \] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω LATERAL FLATTEN

* \[ \] –°–æ–∑–¥–∞–Ω–∞ –ø–ª–æ—Å–∫–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∏–∑ JSON

### –î–µ–Ω—å 2: CTE –∏ –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã

**–¢–µ–æ—Ä–∏—è (35 –º–∏–Ω):**

* Common Table Expressions (CTE) vs –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã

* –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ CTE

* –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

* –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (115 –º–∏–Ω):**

1. **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤ - –ø–æ–¥–∑–∞–ø—Ä–æ—Å vs CTE:**

```sql
-- –ë–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ

-- –ü–æ–¥—Ö–æ–¥ 1: –ü–æ–¥–∑–∞–ø—Ä–æ—Å
SELECT c.C_NAME,
       c.C_ACCTBAL,
       o.O_TOTALPRICE
FROM CUSTOMER c
JOIN ORDERS o ON c.C_CUSTKEY = o.O_CUSTKEY
WHERE o.O_TOTALPRICE > (
    SELECT AVG(O_TOTALPRICE) 
    FROM ORDERS
)
ORDER BY o.O_TOTALPRICE DESC;

-- –ü–æ–¥—Ö–æ–¥ 2: CTE
WITH avg_order AS (
    SELECT AVG(O_TOTALPRICE) as avg_price
    FROM ORDERS
),
high_value_orders AS (
    SELECT o.O_CUSTKEY,
           o.O_TOTALPRICE
    FROM ORDERS o
    CROSS JOIN avg_order a
    WHERE o.O_TOTALPRICE > a.avg_price
)
SELECT c.C_NAME,
       c.C_ACCTBAL,
       h.O_TOTALPRICE
FROM CUSTOMER c
JOIN high_value_orders h ON c.C_CUSTKEY = h.O_CUSTKEY
ORDER BY h.O_TOTALPRICE DESC;
```

1. **–°–ª–æ–∂–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å CTE:**

```sql
-- –ó–∞–¥–∞—á–∞: –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–≥–æ—Ä—Ç–∞–º
WITH customer_first_order AS (
    SELECT O_CUSTKEY,
           MIN(O_ORDERDATE) as first_order_date,
           DATE_TRUNC('MONTH', MIN(O_ORDERDATE)) as cohort_month
    FROM ORDERS
    GROUP BY O_CUSTKEY
),
monthly_activity AS (
    SELECT o.O_CUSTKEY,
           DATE_TRUNC('MONTH', o.O_ORDERDATE) as activity_month,
           COUNT(*) as orders_count,
           SUM(o.O_TOTALPRICE) as total_spent
    FROM ORDERS o
    GROUP BY o.O_CUSTKEY, DATE_TRUNC('MONTH', o.O_ORDERDATE)
),
cohort_analysis AS (
    SELECT cfo.cohort_month,
           ma.activity_month,
           DATEDIFF('month', cfo.cohort_month, ma.activity_month) as period_number,
           COUNT(DISTINCT ma.O_CUSTKEY) as active_customers,
           SUM(ma.total_spent) as cohort_revenue
    FROM customer_first_order cfo
    JOIN monthly_activity ma ON cfo.O_CUSTKEY = ma.O_CUSTKEY
    GROUP BY cfo.cohort_month, ma.activity_month
)
SELECT cohort_month,
       period_number,
       active_customers,
       cohort_revenue,
       -- Retention rate –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
       active_customers / FIRST_VALUE(active_customers) 
           OVER (PARTITION BY cohort_month ORDER BY period_number) * 100 as retention_rate
FROM cohort_analysis
WHERE period_number <= 12  -- –ü–µ—Ä–≤—ã–π –≥–æ–¥
ORDER BY cohort_month, period_number;
```

1. **–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ CTE:**

```sql
-- –ü—Ä–∏–º–µ—Ä: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
WITH RECURSIVE date_series AS (
    -- –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
    SELECT DATE('2023-01-01') as date_value
    
    UNION ALL
    
    -- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π
    SELECT DATEADD('day', 1, date_value)
    FROM date_series
    WHERE date_value < DATE('2023-12-31')
)
SELECT date_value,
       DAYNAME(date_value) as day_name,
       WEEK(date_value) as week_number,
       MONTH(date_value) as month_number,
       QUARTER(date_value) as quarter_number
FROM date_series
ORDER BY date_value;
```

**–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –º–∏–Ω):**

* –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª "CTE Patterns" –≤ SQL-cookbook

* –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á

* –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å CTE vs –ø–æ–¥–∑–∞–ø—Ä–æ—Å—ã

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**

* \[ \] –ü–æ–Ω—è—Ç–Ω–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É CTE –∏ –ø–æ–¥–∑–∞–ø—Ä–æ—Å–∞–º–∏

* \[ \] –í—ã–ø–æ–ª–Ω–µ–Ω –∫–æ–≥–æ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å CTE

* \[ \] –°–æ–∑–¥–∞–Ω —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π CTE

* \[ \] –û–±–Ω–æ–≤–ª–µ–Ω SQL-cookbook

### –î–µ–Ω—å 3: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Tableau I

**–¢–µ–æ—Ä–∏—è (40 –º–∏–Ω):**

* Calculated Fields: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫

* Parameters: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

* Table Calculations: –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

* Level of Detail (LOD) expressions

**–ü—Ä–∞–∫—Ç–∏–∫–∞ (110 –º–∏–Ω):**

1. **Calculated Fields:**

```
// –ë–∞–∑–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
Profit Margin = [Profit] / [Sales]

// –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
Customer Segment = 
IF [Sales] > 10000 THEN "High Value"
ELSEIF [Sales] > 5000 THEN "Medium Value"
ELSE "Low Value"
END

// –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏
Days Since Order = DATEDIFF('day', [Order Date], TODAY())

// –ê–≥—Ä–µ–≥–∞—Ü–∏–∏
Average Order Value = SUM([Sales]) / COUNTD([Order ID])
```

1. **Parameters –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**

```
// –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä "Metric Selector"
// –¢–∏–ø: String, –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á
```
